### A CI workflow template that runs linting and python testing
### TODO: Modify as needed or as desired.

name: Test tap-msaccess

on:
  push:
    branches: [main]
    paths:
    - .github/workflows/test.yml
    - sample_db/**
    - tap_msaccess/**
    - tests/**
    - poetry.lock
    - pyproject.toml
  pull_request:
    paths:
    - .github/workflows/test.yml
    - sample_db/**
    - tap_msaccess/**
    - tests/**
    - poetry.lock
    - pyproject.toml
  schedule:
  - cron: 0 9 * * *

jobs:
  pytest:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        config:
        - database-file: sample_db/Books.accdb
        - database-file: s3://tap-msaccess/Books.accdb
          connection-params: '{"anon": true}'
        - database-file: az://tap-msaccess/Books.accdb
          connection-params: '{"account_name": "matatikaartifacts"}'
    steps:
    - uses: actions/checkout@v5
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      run: |
        pip install poetry
    - name: Install dependencies
      run: |
        poetry env use ${{ matrix.python-version }}
        poetry install
        poetry run pip install fsspec[s3,abfs]
    - name: Configure connection params
      if: ${{ matrix.config.connection-params }}
      run: |
        echo 'TAP_MSACCESS_CONNECTION_PARAMS=${{ matrix.config.connection-params }}' >> $GITHUB_ENV
    - name: Test with pytest
      env:
        TAP_MSACCESS_DATABASE_FILE: ${{ matrix.config.database-file }}
      run: |
        poetry run pytest
